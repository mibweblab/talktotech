// const passport = require('passport');
// const GoogleStrategy = require('passport-google-oauth20').Strategy;
// const mongoose = require('mongoose');
const keys = require('../config/key');

// require('../models/User');
// const User = mongoose.model('users');

// var User = require('mongodb').User;

// console.log(User);
// require('../routes/authRoutes');
// //Let's determine which data of the user object should be stored in the session
// //serialize the user for the session
// passport.serializeUser((user, done) => {
//   done(null, user.id);
//   //this is the unique id generated by mongoDB when we save it
// });

// //deserialize the user for the session
// passport.deserializeUser((id, done) => {
//   User.findById(id).then(user => {
//     done(null, user);
//   });
// });

// //let's tell passport to use googleStrategy auth/google
// passport.use(
//   new GoogleStrategy(
//     {
//       clientID: keys.googleClientID,
//       clientSecret: keys.googleClientSecret,
//       callbackURL: '/auth/google/callback',
//       proxy: true
//     },
//     async (accessToken, refreshToken, profile, done) => {
//       const existingUser = await User.findOne({ googleId: profile.id });
//       console.log(profile);

//       if (existingUser) {
//         //we already have a record with the given profile ID
//         done(null, existingUser);
//       } else {
//         //we dont have a user record so make a new record
//         const user = await new User({ googleId: profile.id }).save();
//         done(null, user);
//       }
//     }
//   )
// );

const passport = require('passport');
var GoogleStrategy = require('passport-google-oauth20').Strategy;

const mongo = require('./authDb');

// set up passport configs
passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: '/auth/google/callback',
      proxy: true
    },
    function(accessToken, refreshToken, profile, done) {
      const users = mongo.getDb().collection('users');
      users
        .findOne({ googleid: profile.id })
        .then(user => {
          if (user) return user;

          // if user doesn't exist, make a new mongo document
          return users.insertOne({
            name: profile.displayName,
            googleid: profile.id
          });
        })
        .then(user => {
          done(null, user);
        })
        .catch(err => done(err));
    }
  )
);
//Let's determine which data of the user object should be stored in the session
//serialize the user for the session
passport.serializeUser((user, done) => {
  done(null, user.id);
  //this is the unique id generated by mongoDB when we save it
});

//deserialize the user for the session
passport.deserializeUser((id, done) => {
  users.findById(id).then(user => {
    done(null, user);
  });
});

// passport.serializeUser(function(user, done) {
//   done(null, user);
// });
// passport.deserializeUser(function(obj, done) {
//   done(null, obj);
// });

module.exports = passport;
